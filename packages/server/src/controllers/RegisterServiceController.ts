import { Request, Response, NextFunction } from 'express';
import { getService } from '../utils/getService';
import { ToolService } from '../services/tools';
import { ITool } from '../Interface';
import { LlmService, ApiSpecification } from '../services/LlmService';
import { StatusCodes } from 'http-status-codes';
import { LoggedInUser } from '../enterprise/Interface.Enterprise'; // Import LoggedInUser

export class RegisterServiceController {
    public async registerApiAsTool(req: Request, res: Response, next: NextFunction): Promise<void> {
        try {
            const user = req.user as LoggedInUser;

            if (!user || !user.activeOrganizationId || !user.activeWorkspaceId) {
                res.status(StatusCodes.UNAUTHORIZED).json({
                    status: 'error',
                    message: 'Authentication failed or active organization/workspace not found for the user.'
                });
                return;
            }
            const orgId = user.activeOrganizationId;
            const workspaceId = user.activeWorkspaceId; // Use active workspace from session

            const { user_query, target_flowise_tool_name } = req.body;

            if (!user_query) {
                res.status(StatusCodes.BAD_REQUEST).json({
                    status: 'error',
                    message: 'Missing mandatory field: user_query'
                });
                return;
            }

            const llmService = getService(LlmService);
            let generatedSpec: ApiSpecification;

            try {
                generatedSpec = await llmService.generateApiSpecification(user_query, target_flowise_tool_name);
            } catch (llmError) {
                console.error('LLM interaction failed in controller:', llmError.message);
                let statusCode = StatusCodes.BAD_GATEWAY;
                if (llmError.message.includes('OpenRouter API key not configured')) {
                    statusCode = StatusCodes.INTERNAL_SERVER_ERROR;
                } else if (llmError.message.includes('dangerous keyword')) {
                    statusCode = StatusCodes.BAD_REQUEST;
                } else if (
                    llmError.message.includes('missing required field') ||
                    llmError.message.includes('not valid JSON') ||
                    llmError.message.includes('must be a') ||
                    llmError.message.includes('Failed to parse LLM response as JSON')
                ) {
                    statusCode = StatusCodes.UNPROCESSABLE_ENTITY;
                } else if (llmError.message.startsWith('LLM API request failed')) {
                    const match = llmError.message.match(/status (\d+)/);
                    if (match && match[1]) {
                        const upstreamStatus = parseInt(match[1], 10);
                        if (upstreamStatus >= 400 && upstreamStatus < 500) statusCode = StatusCodes.BAD_REQUEST;
                    }
                }

                res.status(statusCode).json({
                    status: 'error',
                    message: 'Failed to generate API specification from LLM.',
                    details: llmError.message
                });
                return;
            }

            const toolService = getService(ToolService);

            const toolObject: Partial<ITool> = {
                name: generatedSpec.name,
                description: generatedSpec.description,
                color: generatedSpec.color,
                iconSrc: generatedSpec.iconSrc,
                schema: generatedSpec.schema,
                func: generatedSpec.func,
                workspaceId: workspaceId,
            };

            let newTool: ITool;
            try {
                newTool = await toolService.createTool(toolObject as ITool, orgId);
            } catch (dbError) {
                console.error('Failed to save tool to database:', dbError);
                res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
                    status: 'error',
                    message: 'Failed to register the new tool in the database.',
                    details: dbError.message
                });
                return;
            }

            res.status(StatusCodes.CREATED).json({
                status: 'success',
                message: 'API specification generated by LLM and registered successfully.',
                toolId: newTool.id,
                toolName: newTool.name,
                workspaceId: newTool.workspaceId,
                orgId: orgId,
                generatedSpec: {
                    name: newTool.name,
                    description: newTool.description,
                    color: newTool.color,
                    iconSrc: newTool.iconSrc,
                    schema: newTool.schema,
                    func: newTool.func
                }
            });

        } catch (error) {
            console.error('Unexpected error in registerApiAsTool:', error);
            if (!res.headersSent) {
                next(error);
            } else {
                next(error);
            }
        }
    }
}
